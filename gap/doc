##  <#GAPDoc Label="PetriNetDataStructure">
##  The Petri-Net is represented with five matrices: the input arcs, the output arcs from transitions to places, inhibitory connections, capacity vector, and initial marking. Input: rows represent places, columns transitions, so one entry tells the weight/multiplicity of an arrow (0 if nonexistant). Output: rows are transitions, columns are places.
## Inhibotory connection: zero means there is no inhibition, positive value n means that there is inhibition if there are at least n tokens in place
##  <Example>
##petrinet := rec(
##inputs:= [[1,0],
##          [0,1]],
##          
##outputs := [[1,2],
##            [0,0]],
##
##inhibcons := [[0,0],              
##              [1,0]],
##capacity:= [2,2],
##initial := [[1,0]]
##);
##  </Example>
##  <#/GAPDoc>
##

##  <#GAPDoc Label="GetTransformationOfPetriNetTransition">
##  <ManSection >
##  <Func Arg="petrinet, transition, precond, postcond, ispartial" Name="GetTransformationOfPetriNetTransition" />
##  <Description>
##  Returns the transformation representation of a Petri net transition.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>
##

##  <#GAPDoc Label="ExecutePetriNetTransition">
##  <ManSection >
##  <Func Arg="petrinet, state, transition, precond, postcond" Name="GetTransformationOfPetriNetTransition" />
##  <Description>
##  Executes a transition of the petri net on the given state. It gives back the original state if it is not enabled.
##  <Example>
##  inputs:= [[1,1,0,0,0],
##          [0,1,1,0,0],
##          [0,0,1,1,0]];
##outputs := [[0,1,0],
##            [0,2,0],
##            [0,0,2],
##            [0,0,0],
##            [1,0,0]];
##t:=GetTransformationOfPetriNetTransition(inputs,outputs,1,3);
##  </Example>
##  </Description>
##  </ManSection>
##  <#/GAPDoc>
##

##  <#GAPDoc Label="StrictFiringPreCondition">
##  <ManSection >
##  <Func Arg="petrinet, transition, state" Name="StrictFiringPreCondition" />
##  <Description>
##  The strictest possible condition: there should be enough tokens available. This is sort of the only sensible pre-condition.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>
##

##  <#GAPDoc Label="StrictFiringPostCondition">
##  <ManSection >
##  <Func Arg="petrinet, transition, state" Name="StrictFiringPostCondition" />
##  <Description>
##  The strictest possible condition: there should be enough spaces available at the destination places, No overflow is allowed. That is whay we need the extra parameter of capacity. 
##  </Description>
##  </ManSection>
##  <#/GAPDoc>
##

##  <#GAPDoc Label="MaxAllowedFiringPostCondition">
##  <ManSection >
##  <Func Arg="petrinet, transition, state" Name="MaxAllowedFiringPostCondition" />
##  <Description>
##  Overflow of tokens are allowed at places after a transition. Basically it is always firable.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>
##

##  <#GAPDoc Label="CalculateStatesOfPetriNet">
##  <ManSection >
##  <Func Arg="petrinet" Name="CalculateStatesOfPetriNet" />
##  <Description>
##  It calculates the global markings of a Petri net. If list of initial states is not empty, then it calculates the reachable states from the initial states.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>

##  <#GAPDoc Label="AllGlobalMarkingsOfPetriNet">
##  <ManSection >
##  <Func Arg="petrinet" Name="AllGlobalMarkingsOfPetriNet" />
##  <Description>
##  It calculates all the global markings of a Petri net and puts the result back into the petrinet record as a 'states' field.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>

##  <#GAPDoc Label="ReachableMarkingsOfPetriNet">
##  <ManSection >
##  <Func Arg="petrinet, precond, postcond" Name="ReachableMarkingsOfPetriNet" />
##  <Description>
##  It calculates all the global markings of a Petri net reachable from the specified initial states
## and puts the result back into the petrinet record as a 'states' field.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>

##  <#GAPDoc Label="GetNumberOfStatesOfPetriNets">
##  <ManSection >
##  <Func Arg="capacity" Name="GetNumberOfStatesOfPetriNets" />
##  <Description>
##  Calculates the number of markings of the Petri net, given a vector containing values of how many tokens the places (in order) can accomodate.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>
##

##  <#GAPDoc Label="DumpPetriNet">
##  <ManSection >
##  <Func Arg="petrinet, name, precond,postcond, ispartial" Name="DumpPetriNet" />
##  <Description>
##  The comprehensive function for exporting (to GraphViz, JGrasp) Petri nets. It also returns the generators as a list of transformations.
##  </Description>
##  </ManSection>
##  <#/GAPDoc>
##

